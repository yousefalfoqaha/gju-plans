---
import {$studyPlan, fetchStudyPlan} from "../stores/studyPlan";
import {sortByCourseCode} from "../utils/sortByCourseCode";
import SectionCombobox from "./SectionCombobox.astro";
import type {Course} from "../types";
import CourseCard from "./CourseCard.astro";

await fetchStudyPlan(1);

const studyPlan = $studyPlan.get();
if (!studyPlan) return;
const {
    program,
    courses,
    track,
    year,
    sections
} = studyPlan;

const requiredCourses = sections
    .filter(sec => sec.type === "Requirement")
    .flatMap(sec => sec.courses)
    .map(id => courses[id])
    .sort((a, b) => a.sequences.level - b.sequences.level);

const minLevel = requiredCourses[0]?.sequences.level;
const maxLevel = requiredCourses[requiredCourses.length - 1]?.sequences.level;
---
<div class="flex flex-col gap-6 p-6 h-full w-full">
    <header class="flex flex-col gap-1">
        <h1 class="text-2xl font-bold">{program.degree}s in {program.name} ({program.code})</h1>
        <h2 class="opacity-60">
            {year}/{year + 1}
            {track ? ` - ${track}` : ''}
        </h2>
    </header>

    <div class="flex flex-col gap-2 relative">
        <div class="space-y-2">
            <div class="flex gap-2">
                <div class="flex flex-col gap-1">
                    <SectionCombobox sections={sections}/>
                </div>
                <div class="flex flex-col w-full gap-1">
                    <input type="text" class="w-full p-2 border rounded" placeholder="Search a Course..."/>
                </div>
                <div class="flex gap-2 text-nowrap my-auto pr-2 pl-1">
                    <label>German Track: </label>
                    <div>
                        <input type="radio" id="b1" name="german-track" checked/>
                        <label for="b1" class="opacity-60">B1</label>
                    </div>
                    <div>
                        <input type="radio" id="b2" name="german-track"/>
                        <label for="b2" class="opacity-60">B2</label>
                    </div>
                </div>
            </div>

            <div class="flex border-b select-none">
                <p class="sticky top-0 mr-auto my-auto pl-1 opacity-50 flex gap-2 hover:opacity-100 transition-opacity cursor-pointer select-none">
                    <i data-lucide="chevrons-left"/>
                    Foundational
                </p>
                <p class="mx-auto font-semibold p-2">All Compulsory Courses</p>
                <p class="sticky top-0 ml-auto my-auto pr-1 opacity-50 flex gap-2 hover:opacity-100 transition-opacity cursor-pointer select-none">
                    Advanced
                    <i data-lucide="chevrons-right"/>
                </p>
            </div>

            <div class="relative">
                <div id="left-navigator" class="absolute left-0 group z-50 w-24 h-full bg-gradient-to-r from-white flex items-center justify-center cursor-pointer">
                    <i
                            data-lucide="chevron-left"
                            class="size-14 group-hover:size-16 opacity-60 group-hover:opacity-100 transition-all duration-300 ease-in-out"/>
                </div>
                <div id="right-navigator" class="absolute right-0 group z-50 w-24 h-full bg-gradient-to-l from-white flex items-center justify-center cursor-pointer">
                    <i
                            data-lucide="chevron-right"
                            class="size-14 group-hover:size-16 opacity-60 group-hover:opacity-100 transition-all duration-300 ease-in-out"/>
                </div>
                <div class="flex gap-2 overflow-hidden scroll-smooth" id="courses-grid">
                    {Array.from({length: maxLevel - minLevel + 1}, (_, i) => minLevel + i).map(level => {
                        const levelCourses = requiredCourses
                            .filter(c => c.sequences.level === level)
                            .sort((a, b) => sortByCourseCode(a, b, program.code));

                        if (levelCourses.length === 0) return;
                        return (
                                <div
                                        class="grid grid-flow-col size-fit gap-2"
                                        style={
                                            `grid-template-rows: repeat(${
                                                levelCourses.length <= 6
                                                    ? levelCourses.length
                                                    : Math.ceil(levelCourses.length / 3)
                                            }, minmax(0, 1fr));`
                                        }
                                >
                                    {levelCourses.map((course: Course) =>
                                            <CourseCard {...course}/>)}
                                </div>
                        )
                    })}
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    const coursesGrid = document.getElementById("courses-grid");
    const leftNavigator = document.getElementById('left-navigator');
    const rightNavigator = document.getElementById('right-navigator');

    const SCROLL_AMOUNT = 300;

    function updateHorizontalNavigation() {
        if (!coursesGrid || !leftNavigator || !rightNavigator) return;

        const hiddenLeft = coursesGrid.scrollLeft;
        const hiddenRight = coursesGrid.scrollWidth - coursesGrid.clientWidth - coursesGrid.scrollLeft;

        leftNavigator.style.display = hiddenLeft <= 0 ? 'none' : 'flex';
        rightNavigator.style.display = hiddenRight <= 0 ? 'none' : 'flex';
    }

    leftNavigator?.addEventListener('click', () => {
        if (!coursesGrid) return;
        coursesGrid.scrollBy({
            left: -SCROLL_AMOUNT,
            behavior: 'smooth'
        });
    });

    rightNavigator?.addEventListener('click', () => {
        if (!coursesGrid) return;
        coursesGrid.scrollBy({
            left: SCROLL_AMOUNT,
            behavior: 'smooth'
        });
    });

    const resizeObserver = new ResizeObserver(() => {
        updateHorizontalNavigation();
    });

    if (coursesGrid) {
        resizeObserver.observe(coursesGrid);
        coursesGrid.addEventListener('scroll', updateHorizontalNavigation);
    }

    updateHorizontalNavigation();
</script>