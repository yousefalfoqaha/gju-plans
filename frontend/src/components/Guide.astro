---
import {$studyPlan, fetchStudyPlan} from "../stores/studyPlan";
import {sortByCourseCode} from "../utils/sortByCourseCode";
import SectionCombobox from "./SectionCombobox.astro";
import type {Course} from "../types";
import CourseCard from "./CourseCard.astro";

await fetchStudyPlan(1);

const studyPlan = $studyPlan.get();
if (!studyPlan) return;
const {
    program,
    courses,
    track,
    year,
    sections
} = studyPlan;

const requiredCourses = sections
    .filter(sec => sec.type === "Requirement")
    .flatMap(sec => sec.courses)
    .map(id => courses[id])
    .sort((a, b) => a.sequences.level - b.sequences.level);

const minLevel = requiredCourses[0]?.sequences.level;
const maxLevel = requiredCourses[requiredCourses.length - 1]?.sequences.level;
---

<div class="flex flex-col gap-6 p-6 h-full w-full">

    <!-- Study plan header -->
    <header class="flex flex-col gap-1">
        <h1 class="text-2xl font-bold">{program.degree}s in {program.name} ({program.code})</h1>
        <h2 class="opacity-60">
            {year}/{year + 1}
            {track ? ` - ${track}` : ''}
        </h2>
    </header>

    <div class="space-y-2 relative">
        <!-- Filters -->
        <div class="flex flex-col lg:flex-row gap-2">
            <div class="flex flex-col gap-1">
                <SectionCombobox sections={sections}/>
            </div>
            <div class="flex flex-col w-full gap-1">
                <input type="text" class="w-full p-2 border rounded" placeholder="Search a Course..."/>
            </div>
            <div class="flex gap-2 text-nowrap my-auto pr-2 pl-1">
                <label>German Track:</label>
                <div>
                    <input type="radio" id="b1" name="german-track" checked/>
                    <label for="b1" class="opacity-60">B1</label>
                </div>
                <div>
                    <input type="radio" id="b2" name="german-track"/>
                    <label for="b2" class="opacity-60">B2</label>
                </div>
            </div>
        </div>

        <!-- Navigation arrows -->
        <div class="sticky top-0 z-30 py-2">
            <div class="flex border rounded-lg bg-white shadow-sm hover:shadow w-fit mx-auto">
                <p id="left-navigator"
                   class="hover:bg-gray-200 rounded-l-lg p-1 px-14 border-r my-auto opacity-50 flex gap-2 hover:opacity-100 transition-opacity cursor-pointer select-none">
                    <i data-lucide="move-left"></i>
                </p>
                <p id="right-navigator"
                   class="hover:bg-gray-200 rounded-r-lg p-1 px-14 my-auto opacity-50 flex gap-2 hover:opacity-100 transition-opacity cursor-pointer select-none">
                    <i data-lucide="move-right"></i>
                </p>
            </div>
        </div>

        <!-- Courses grid -->
        <div class="relative">
            <div class="flex md:absolute md:top-[-2.0rem] w-full gap-2 justify-between select-none mb-2">
                <p class="flex opacity-40 gap-1">
                    <i data-lucide="chevron-first"></i> Foundational
                </p>

                <p class="flex opacity-40 gap-1">
                    Advanced <i data-lucide="chevron-last"></i>
                </p>
            </div>
            <div id="left-hidden-gradient"
                 class="sm:w-5 pointer-events-none absolute left-0 group z-20 w-8 h-full bg-gradient-to-r from-white flex items-center justify-center cursor-pointer"/>
            <div id="right-hidden-gradient"
                 class="sm:w-5 pointer-events-none  absolute right-0 group z-20 w-8 h-full bg-gradient-to-l from-white flex items-center justify-center cursor-pointer"/>

            <div id="courses-grid" class="flex gap-2 overflow-auto scroll-smooth">
                {Array.from({length: maxLevel - minLevel + 1}, (_, i) => minLevel + i).map(level => {
                    const levelCourses = requiredCourses
                        .filter(c => c.sequences.level === level)
                        .sort((a, b) => sortByCourseCode(a, b, program.code));

                    if (levelCourses.length === 0) return;
                    return (
                            <div
                                    class="grid grid-flow-col size-fit gap-2"
                                    style={
                                        `grid-template-rows: repeat(${
                                            levelCourses.length <= 6
                                                ? levelCourses.length
                                                : Math.ceil(levelCourses.length / 3)
                                        }, minmax(0, 1fr));`
                                    }
                            >
                                {levelCourses.map((course: Course) =>
                                        <CourseCard {...course}/>)}
                            </div>
                    )
                })}
            </div>
        </div>
    </div>
</div>

<style>
    #courses-grid {
        -ms-overflow-style: none;  /* IE and Edge */
        scrollbar-width: none;     /* Firefox */
    }

    #courses-grid::-webkit-scrollbar {
        display: none;            /* Chrome, Safari and Opera */
    }
</style>

<script>
    const coursesGrid = document.getElementById("courses-grid");
    const leftNavigator = document.getElementById('left-navigator');
    const rightNavigator = document.getElementById('right-navigator');
    const leftHiddenGradient = document.getElementById('left-hidden-gradient');
    const rightHiddenGradient = document.getElementById('right-hidden-gradient');

    function getScrollAmount() {
        if (!coursesGrid) return;
        return coursesGrid.clientWidth * 0.6;
    }

    function updateHorizontalNavigation() {
        if (!coursesGrid || !leftNavigator || !rightNavigator || !leftHiddenGradient || !rightHiddenGradient) return;

        const hiddenLeft = coursesGrid.scrollLeft;
        const hiddenRight = coursesGrid.scrollWidth - coursesGrid.clientWidth - coursesGrid.scrollLeft;

        leftHiddenGradient.style.display = hiddenLeft <= 0 ? 'none' : 'flex';
        rightHiddenGradient.style.display = hiddenRight <= 0 ? 'none' : 'flex';
    }

    leftNavigator?.addEventListener('click', () => {
        if (!coursesGrid) return;
        coursesGrid.scrollBy({
            left: -getScrollAmount(),
            behavior: 'smooth'
        });
    });

    rightNavigator?.addEventListener('click', () => {
        if (!coursesGrid) return;
        coursesGrid.scrollBy({
            left: getScrollAmount(),
            behavior: 'smooth'
        });
    });

    const resizeObserver = new ResizeObserver(() => {
        updateHorizontalNavigation();
    });

    if (coursesGrid) {
        resizeObserver.observe(coursesGrid);
        coursesGrid.addEventListener('scroll', updateHorizontalNavigation);
    }

    updateHorizontalNavigation();

</script>