---
import {sortByCourseCode} from "../utils/sortByCourseCode";
import type {Course} from "../types";
import CourseCard from "./CourseCard.astro";
import NavigationControls from "./NavigationControls.astro";
import CourseFilter from "./CourseFilter.astro";

const {sections, courses, program} = Astro.props;

const requiredCourses = sections
    .filter(sec => sec.type === "Requirement")
    .flatMap(sec => sec.courses)
    .map(id => courses[id])
    .sort((a, b) => a.sequences.level - b.sequences.level);

const minLevel = requiredCourses[0]?.sequences.level;
const maxLevel = requiredCourses[requiredCourses.length - 1]?.sequences.level;
---

<div class="space-y-2 relative">
    <CourseFilter sections={sections} />

    <NavigationControls/>

    <div class="relative">
        <div class="flex md:absolute md:top-[-2.0rem] w-full gap-2 justify-between select-none mb-2">
            <p class="flex opacity-40 gap-1">
                <i data-lucide="chevron-first"></i> Foundational
            </p>

            <p class="flex opacity-40 gap-1">
                Advanced <i data-lucide="chevron-last"></i>
            </p>
        </div>

        <div id="left-hidden-gradient"
             class="sm:w-5 pointer-events-none absolute left-0 z-20 w-8 h-full bg-gradient-to-r from-white"/>
        <div id="right-hidden-gradient"
             class="sm:w-5 pointer-events-none  absolute right-0 z-20 w-8 h-full bg-gradient-to-l from-white"/>

        <div id="courses-grid" class="flex gap-2 overflow-auto scroll-smooth">
            {Array.from({length: maxLevel - minLevel + 1}, (_, i) => minLevel + i).map(level => {
                const levelCourses = requiredCourses
                    .filter(c => c.sequences.level === level)
                    .sort((a, b) => sortByCourseCode(a, b, program.code));

                if (levelCourses.length === 0) return;

                return (
                        <div
                                class="level-courses grid grid-flow-col size-fit gap-2"
                                style={
                                    `grid-template-rows: repeat(${
                                        levelCourses.length <= 6
                                            ? levelCourses.length
                                            : Math.ceil(levelCourses.length / 3)
                                    }, minmax(0, 1fr));`
                                }
                        >
                            {levelCourses.map((course: Course) =>
                                    <CourseCard {...course}/>)}
                        </div>
                );
            })}
        </div>
    </div>
</div>

<style>
    #courses-grid {
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    #courses-grid::-webkit-scrollbar {
        display: none;
    }
</style>