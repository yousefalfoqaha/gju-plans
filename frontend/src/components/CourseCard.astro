---
const {id, code, name, creditHours, type, prerequisites, corequisites, sequences} = Astro.props;
---

<course-card
        id={id}
        data-id={JSON.stringify(id)}
        data-prerequisites={JSON.stringify(prerequisites)}
        data-corequisites={JSON.stringify(corequisites)}
        data-sequences={JSON.stringify(sequences)}
        class="transition-opacity duration-300 ease-in-out rounded"
>
    <div class="select-none cursor-pointer relative size-32 bg-gray-200 p-3 py-2 transition-colors group rounded">
        <h3 class="font-semibold">{code}</h3>
        <p class="text-sm line-clamp-3">{name}</p>
        <p class="absolute bottom-2 left-2 text-sm font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
            {creditHours} Cr.
        </p>
        <p class="absolute bottom-2 right-2 text-sm font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
            {type}
        </p>
        <i
                data-lucide="info"
                class="opacity-0 size-5 absolute top-2 right-2 hover:text-gray-500 group-hover:opacity-100 cursor-pointer transition-opacity"
        />
        <div class="indicator absolute top-1 right-1 group-hover:opacity-0 transition-opacity"/>
    </div>
</course-card>

<style>
    .selected {
        background-color: #bfdbfe;
        --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        --tw-shadow-colored: 0 20px 25px -5px #0000, 0 8px 10px -6px #0000;
        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    }

    .prerequisite {
        background-color: #fdba74;
    }

    .corequisite {
        background-color: #9ca3af;
        color: #ffff;
    }

    .prerequisite-sequence {
        background-color: #fef08a;
    }

    .postrequisite-sequence {
        background-color: #075985;
        color: #ffff;
    }
</style>

<script>
    import type {CoursePrerequisite, CourseSequences} from "../types";
    import {
        createElement,
        ArrowBigRightDash,
        ArrowBigLeftDash,
        ArrowBigLeft,
        ArrowBigUp
    } from "lucide";

        let selectedCourse: number | null = null;

        class CourseCard extends HTMLElement {
            private readonly id: number;
            private prerequisites: CoursePrerequisite[];
            private corequisites: number[];
            private sequences: CourseSequences;

            constructor() {
                super();
                this.id = JSON.parse(this.dataset.id ?? 'null');
                this.prerequisites = JSON.parse(this.dataset.prerequisites || '[]');
                this.corequisites = JSON.parse(this.dataset.corequisites || '[]');
                this.sequences = JSON.parse(this.dataset.sequences || '{}');

                this.addEventListener('click', () => {
                    this.resetHighlights();

                    if (selectedCourse === this.id) {
                        selectedCourse = null;
                        return;
                        }
                    selectedCourse = this.id;

                    this.querySelector('div')?.classList.add('selected');
                    this.highlightRelatedCourses();
                    this.scrollIntoView({ behavior: 'smooth', inline: 'center', block: 'center' });
                    });
                }

            private highlightRelatedCourses = () => {
                const coursesToHighlight = [
                    ...this.prerequisites.map(pr => ({
                        id: pr.prerequisite,
                        className: 'prerequisite',
                        icon: ArrowBigLeft
                        })),
                    ...this.corequisites.map(id => ({
                        id: id,
                        className: 'corequisite',
                        icon: ArrowBigUp
                        })),
                    ...this.sequences.prerequisiteSequence
                        .map(id => ({
                        id: id,
                        className: 'prerequisite-sequence',
                        icon: ArrowBigLeftDash
                        })),
                    ...this.sequences.postrequisiteSequence.map(id => ({
                        id: id,
                        className: 'postrequisite-sequence',
                        icon: ArrowBigRightDash
                        }))
                ];

                coursesToHighlight.forEach(({id, className, icon}) => {
                    const courseCard = document.querySelector(`course-card[id="${id}"] > div`);
                    const indicator = courseCard?.querySelector('.indicator');
                    if (!courseCard || !indicator) return;

                    courseCard.classList.add(className);

                    const iconElement = createElement(icon);
                    iconElement.classList.add(
                        'opacity-0',
                        'transition-opacity',
                        'duration-300'
                        );
                    indicator.appendChild(iconElement);

                    requestAnimationFrame(() => {
                        iconElement.classList.remove('opacity-0');
                        });
                    });
                }

            private resetHighlights = () => {
                const courseCards = document.querySelectorAll('course-card > div');
                courseCards.forEach(card => {
                    card.classList.remove(
                        'selected',
                        'prerequisite',
                        'corequisite',
                        'prerequisite-sequence',
                        'postrequisite-sequence'
                        );

                    const indicator = card.querySelector('.indicator');
                    if (indicator) indicator.innerHTML = '';
                    });
                }
            }

        customElements.define('course-card', CourseCard);
</script>