---
const {
    id,
    code,
    name,
    creditHours,
    lectureHours,
    practicalHours,
    ects,
    type,
    prerequisites,
    corequisites,
    sequences
} = Astro.props;
---

<course-card
        id={id}
        data-course={JSON.stringify({
            id,
            code,
            name,
            creditHours,
            lectureHours,
            practicalHours,
            ects,
            type,
            prerequisites,
            corequisites,
            sequences
        })}
        class="transition-opacity duration-300 ease-in-out rounded"
>
    <div class="select-none hover:shadow-lg transition-all cursor-pointer relative size-32 bg-gray-200 p-3 py-2 group rounded">
        <h3 class="font-semibold">{code}</h3>
        <p class="text-sm line-clamp-3">{name}</p>
        <p class="absolute bottom-2 left-2 text-sm font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
            {creditHours} Cr.
        </p>
        <p class="absolute bottom-2 right-2 text-sm font-semibold group-hover:opacity-50 opacity-0 transition-opacity">
            {type}
        </p>
        <button class="info-button z-10 group-hover:opacity-100 hover:!opacity-50 opacity-0 absolute top-2 right-2 cursor-pointer transition-opacity">
            <i data-lucide="info" class="size-5"/>
        </button>
        <div class="indicator absolute top-1 right-1 group-hover:opacity-0 transition-opacity"/>
    </div>
</course-card>

<style>
    .selected {
        background-color: #bfdbfe;
        --tw-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        --tw-shadow-colored: 0 20px 25px -5px #0000, 0 8px 10px -6px #0000;
        box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);
    }

    .prerequisite {
        background-color: #fdba74;
    }

    .corequisite {
        background-color: #9ca3af;
        color: #ffff;
    }

    .prerequisite-sequence {
        background-color: #fef08a;
    }

    .postrequisite-sequence {
        background-color: #075985;
        color: #ffff;
    }
</style>

<script>
    import type {Course} from "../types";
    import {
        createElement,
        ArrowBigRightDash,
        ArrowBigLeftDash,
        ArrowBigLeft,
        ArrowBigUp
        } from "lucide";

    let selectedCourse: number | null = null;

    class CourseCard extends HTMLElement {
        private readonly course: Course;

        constructor() {
            super();
            this.course = JSON.parse(this.dataset.course || '{}');

            this.addEventListener('click', () => {
                this.resetHighlights();

                if (selectedCourse === this.course.id) {
                    selectedCourse = null;
                    return;
                }
                selectedCourse = this.course.id;

                this.querySelector('div')?.classList.add('selected');
                this.highlightRelatedCourses();
                this.scrollIntoView({behavior: 'smooth', inline: 'center', block: 'center'});
            });

            this.querySelector('.info-button')?.addEventListener('click', (e) => {
                e.stopPropagation();
                window.showCourseDialog(this.course);
            });
        }

        private highlightRelatedCourses = () => {
            const coursesToHighlight = [
                ...this.course.prerequisites.map(pr => ({
                    id: pr.prerequisite,
                    className: 'prerequisite',
                    icon: ArrowBigLeft
                })),
                ...this.course.corequisites.map(id => ({
                    id: id,
                    className: 'corequisite',
                    icon: ArrowBigUp
                })),
                ...this.course.sequences.prerequisiteSequence
                    .map(id => ({
                    id: id,
                    className: 'prerequisite-sequence',
                    icon: ArrowBigLeftDash
                })),
                ...this.course.sequences.postrequisiteSequence.map(id => ({
                    id: id,
                    className: 'postrequisite-sequence',
                    icon: ArrowBigRightDash
                }))
            ];

            coursesToHighlight.forEach(({id, className, icon}) => {
                const courseCard = document.querySelector(`course-card[id="${id}"] > div`);
                const indicator = courseCard?.querySelector('.indicator');
                if (!courseCard || !indicator) return;

                courseCard.classList.add(className);

                const iconElement = createElement(icon);
                iconElement.classList.add(
                    'opacity-0',
                    'transition-opacity',
                    'duration-300'
                );
                indicator.appendChild(iconElement);

                requestAnimationFrame(() => {
                    iconElement.classList.remove('opacity-0');
                });
            });
        }

        private resetHighlights = () => {
            const courseCards = document.querySelectorAll('course-card > div');
            courseCards.forEach(card => {
                card.classList.remove(
                    'selected',
                    'prerequisite',
                    'corequisite',
                    'prerequisite-sequence',
                    'postrequisite-sequence'
                );

                const indicator = card.querySelector('.indicator');
                if (indicator) indicator.innerHTML = '';
            });
        }
    }

    customElements.define('course-card', CourseCard);
</script>